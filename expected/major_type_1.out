BEGIN;
CREATE EXTENSION IF NOT EXISTS cbor;
\set iterations 3
--
-- Negative integers from -1 to -24
-- major_type = 1 AND additional_type <= 23
--
SELECT
  jsonb_agg(cbor.to_jsonb(decode(lpad(to_hex((1::bit(3) || additional_type::bit(5))::bit(8)::integer),2,'0'),'hex')))
  =
  jsonb_agg(-1-additional_type)
FROM (
  SELECT floor(random()*24)::integer AS additional_type
  FROM generate_series(1,:iterations)
) AS q;
 ?column? 
----------
 t
(1 row)

--
-- Negative integers from -1 to -256 -(2^8)
-- major_type = 1 AND additional_type = 24
--
SELECT
  jsonb_agg(cbor.to_jsonb(decode(lpad(to_hex((1::bit(3) || 24::bit(5) || data_value::bit(8))::bit(16)::integer),4,'0'),'hex')))
  =
  jsonb_agg(-1-data_value)
FROM (
  SELECT floor(random()*256)::integer AS data_value
  FROM generate_series(1,:iterations)
) AS q;
 ?column? 
----------
 t
(1 row)

--
-- Negative integers from -1 to -65536 -(2^16)
-- major_type = 1 AND additional_type = 25
--
SELECT
  jsonb_agg(cbor.to_jsonb(decode(lpad(to_hex((1::bit(3) || 25::bit(5) || data_value::bit(16))::bit(24)::integer),6,'0'),'hex')))
  =
  jsonb_agg(-1-data_value)
FROM (
  SELECT floor(random()*65536)::integer AS data_value
  FROM generate_series(1,:iterations)
) AS q;
 ?column? 
----------
 t
(1 row)

--
-- Negative integers from -1 to -4294967296 -(2^32)
-- major_type = 1 AND additional_type = 26
--
SELECT
  jsonb_agg(cbor.to_jsonb(decode(lpad(to_hex((1::bit(3) || 26::bit(5))::bit(8)::integer),2,'0') || lpad(to_hex(data_value::bit(32)::bigint),8,'0'),'hex')))
  =
  jsonb_agg(-1-data_value)
FROM (
  SELECT floor(random()*4294967296)::bigint AS data_value
  FROM generate_series(1,:iterations)
) AS q;
 ?column? 
----------
 t
(1 row)

--
-- Negative integers from -1 to -18446744073709551616 -(2^64)
-- major_type = 1 AND additional_type = 27
--
SELECT
  jsonb_agg(cbor.to_jsonb(decode(lpad(to_hex((1::bit(3) || 27::bit(5))::bit(8)::integer),2,'0') || lpad(encode(cbor.numeric_to_bytea(data_value),'hex'),16,'0'),'hex')))
  =
  jsonb_agg(-1-data_value)
FROM (
  SELECT (floor(random()*(2::numeric^64-1)))::numeric AS data_value
  FROM generate_series(1,:iterations)
) AS q;
 ?column? 
----------
 t
(1 row)

ROLLBACK;
